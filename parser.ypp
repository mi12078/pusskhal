%{
#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include "symTab.hpp"
#include "exprAST.hpp"
#include "stmtAST.hpp"

#define YYDEBUG 1

extern int yylex();

SymbolTable st = SymbolTable::get();
StmtAST* rootNode;
//stream used to output the assembly code to
std::ostream ostr(std::cout.rdbuf());
//used for storing global as well as fn local vars and parameters
std::map<std::string, std::stack<std::string> > varTrTable;

void yyerror(std::string s)
{
	std::cerr << s << std::endl;
	exit(1);
}

struct blkStruct
{
	std::vector<std::pair<std::string, TypeAST*> > *params;
	std::vector<StmtAST*> *procFnDecls;
	StmtAST *stmts;
};

%}

%union {
	int i;
	double r;
	std::string *s;
	std::string *id;
	ExprAST *expr;
	TypeAST *ty;
	StmtAST *stmt;
	AssignmentStmtAST* assign;
	std::vector<std::string> *strVec;
	std::vector<StmtAST*> *stmtVec;
	std::vector<ExprAST*> *exprVec;
	std::vector<std::pair<std::string, TypeAST*> > *pfp;
	blkStruct *blks;
}

%token PROGRAM CONST TYPE VAR PROCEDURE FUNCTION BEGINT END WHILE NOT
%token DO IF OF THEN FOR TO DOWNTO READLN WRITELN
%token INTEGERTYPE REALTYPE STRINGTYPE BOOLEANTYPE
%token ARRAY
%token TRUE FALSE EOFT
%token UMINUS

%token<s> ID
%token<i> INTEGER
%token<r> REAL
%token<s> STRING


%type<strVec> var_list
%type<expr> expr bool_rel_expr proc_func_arg
%type<ty> type
%type<pfp> proc_func_param var_decl var_decl_list var_decls 
%type<pfp> proc_func_params  proc_func_param_list 
%type<stmt> statement if_stmt for_stmt while_stmt
%type<stmt> proc_func_call compound_statement stmt_part func_decl proc_func_decl
%type<stmtVec> statement_seq proc_func_decls
%type<exprVec> proc_func_arg_list
%type<blks> block
%type<assign> assignment
%type<stmt> arr_assignment

%right ":="
%left '='
%left '<' '>'
%left '['
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS

%%

/*program*/
program: program_heading ';' program_block
;
program_heading: PROGRAM ID
| PROGRAM ID '(' program_parameters ')'
;
program_parameters: program_parameters ',' ID
| ID
;
program_block: block '.' {
	/*writeln insertion*/
	std::vector<std::pair<std::string, TypeAST*> > fv;
	TypeAST* ft = new FunctionType(new VoidType, fv);
	st.insertSymbol("writeln", ft);

	/*merging fn decls and the main program block into one compound stmt*/
	auto vars = new VarDeclStmtAST(*($1->params));
	auto mainBlock = new MainBlockStmtAST($1->stmts);
	std::vector<StmtAST*> tmp(*($1->procFnDecls));
	tmp.insert(tmp.begin(), vars);
	tmp.push_back(mainBlock);
	rootNode = new CompoundStmtAST(tmp);
}
;
/*shit, pascal allows nested functions...
 *can we ignore that, since block is used only in the
 *program block and inside procs/fns? */
/*consider only vars and stmts part*/
block: const_defs type_defs var_decls proc_func_decls stmt_part {
	/*we need to pass proc_func_decls as well for the main program
	 *but ignore it when in func_decl?*/
	$$ = new blkStruct;
	$$->params = $3;
	$$->procFnDecls = $4;
	$$->stmts = $5;
}
;

/*constants*/
const_defs: CONST const_def_list
|
;
const_def_list: const_def_list const_def
| const_def
;
const_def: ID '=' INTEGER ';'
;

/*types*/
type_defs: TYPE type_def_list
|
;
type_def_list: type_def_list type_def
| type_def
;
type_def: ID '=' type ';'
;

/*variables*/
var_decls: VAR var_decl_list { $$ = $2; }
| { $$ = new std::vector<std::pair<std::string, TypeAST*> >(); }
;
var_decl_list: var_decl_list var_decl {
	$$ = $1;
	for(auto e: *$2)
		$$->push_back(e);
}
| var_decl {
	$$ = new std::vector<std::pair<std::string, TypeAST*> >();
	for(auto e: *$1)
		$$->push_back(e);
	//delete $1? w8, TypeAST*s would need to be copied then...
}
;
var_decl: var_list ':' type ';' {
	$$ = new std::vector<std::pair<std::string, TypeAST*> >();
	for(auto e: *$1)
		$$->push_back(std::make_pair(e, $3));
	//delete $3;
}
;
var_list: var_list ',' ID {
	$$ = $1;
	$$->push_back(*$3);
	//delete $3;
}
| ID {
	$$ = new std::vector<std::string>();
	$$->push_back(*$1);
	//delete $1;
}

;
type: INTEGERTYPE { $$ = new IntegerType; }
| REALTYPE { $$ = new RealType; }
| STRINGTYPE { $$ = new RealType; }
| BOOLEANTYPE { $$ = new BooleanType; }
/*| arraytype */
/*| ID */
; 
/*arraytype: ARRAY range_list OF type
;
range_list: range_list ',' range
| range
;
range: '[' INTEGER '.''.' INTEGER ']'
;*/

/*procedures & functions*/
proc_func_decls: proc_func_decls ';' proc_func_decl {
	$$ = $1;
	$$->push_back($3);
}
| proc_func_decl {
	$$ = new std::vector<StmtAST*>();
	$$->push_back($1);
}

;
proc_func_decl : func_decl { $$ = $1; }
/*| proc_decl*/
| { $$ = new EmptyStmtAST; }
;
/*proc_decl: PROCEDURE ID proc_func_param_list ';' block
;*/
func_decl: FUNCTION ID proc_func_param_list ':' type ';' block {
	/*serves as a parameter-local variable separator, because
	 *we pass them in the same vector*/
	$3->push_back(std::make_pair(std::string(""), nullptr));
	for(auto e: *($7->params))
		$3->push_back(e);

	auto* tmp = new VarDeclStmtAST(*$3);
	$$ = new FnDeclStmtAST(*$2, tmp, $5, $7->stmts);
}
;
proc_func_param_list : '(' proc_func_params ')' { $$ = $2; }
| {	$$ = new std::vector<std::pair<std::string, TypeAST*> >(); }
;
proc_func_params: proc_func_params ';' proc_func_param {
	$$ = $1;
	for(auto e: *$3)
		$$->push_back(e);
}
| proc_func_param {
	$$ = new std::vector<std::pair<std::string, TypeAST*> >();
	for(auto e: *$1)
		$$->push_back(e);
}
;
proc_func_param: var_list ':' type {
	$$ = new std::vector<std::pair<std::string, TypeAST*> >();
	for(auto e : *$1)
		$$->push_back(std::make_pair(e, $3));
}
;

/*statements*/
stmt_part: compound_statement {
	$$ = $1;
}
;
compound_statement: BEGINT statement_seq END {
	/*do we create the node here, or above in the block?
	 *Presumably we do, compund can appear in other places than
	 *a function or the program main block.*/
	$$ = new CompoundStmtAST(*$2);
}
;
statement_seq: statement_seq ';' statement {
	$$ = $1;
	$$->push_back($3);
}
| statement { 
	$$ = new std::vector<StmtAST*>();
	$$->push_back($1);
}
;
statement: assignment { $$ = $1; }
| arr_assignment { $$ = $1; }
| if_stmt { $$ = $1; }
| for_stmt { $$ = $1; }
| while_stmt { $$ = $1; }
| proc_func_call { $$ = $1; }
| ID /*poziv fje/proc*/ {
	std::vector<ExprAST*> tmp;;
	$$ = new FnCallStmtAST(*$1, tmp);
	delete $1;
}
| compound_statement { $$ = $1; }
| { $$ = new EmptyStmtAST; }
;

expr: expr '+' expr 	{ $$ = new BinaryExprAST('+', $1, $3); }
| expr '-' expr 		{ $$ = new BinaryExprAST('-', $1, $3); }
| expr '*' expr 		{ $$ = new BinaryExprAST('*', $1, $3); }
| expr '/' expr 		{ $$ = new BinaryExprAST('/', $1, $3); }
| expr '<' expr 		{ $$ = new BinaryExprAST('<', $1, $3); }
| expr '>' expr 		{ $$ = new BinaryExprAST('>', $1, $3); }
| '-' expr %prec UMINUS { $$ = new UnaryExprAST('-', $2); }
| '(' expr ')' 			{ $$ = $2; }
| ID '[' expr ']' {
	$$ = new ArrExprAST(*$1, $3);
	delete $1;
}
| ID {
	/*TODO:moze biti i fja/proc bez args, kako znati koje?*/
	$$ = new VarExprAST(*$1);
	delete $1;
}
| ID '(' proc_func_arg_list ')' /*proc_func_call*/ {
	/*only a fn can return a result*/
	$$ = new FnCallExprAST(*$1, *$3);
	delete $1;
}
| INTEGER 	{ $$ = new IntegerExprAST($1, new IntegerType); }
| REAL 		{ $$ = new RealExprAST($1, new RealType); }
| STRING	{ $$ = new StringExprAST(*$1, new StringType); delete $1; }
;

bool_rel_expr: NOT bool_rel_expr { $$ = new UnaryExprAST('!', $2); }
| expr '>' expr { $$ = new BinaryExprAST('>', $1, $3); }
| expr '<' expr { $$ = new BinaryExprAST('<', $1, $3); }
| expr '=' expr { $$ = new BinaryExprAST('=', $1, $3); }
| TRUE { $$ = new BooleanExprAST(true, new BooleanType); }
| FALSE { $$ = new BooleanExprAST(false, new BooleanType); }
/*| EOFT*/
;

assignment: ID ':''=' expr {
	$$ = new AssignmentStmtAST(*$1, $4);
	//delete $1;
}
;
arr_assignment: ID '[' expr ']' ':''=' expr {
	$$ = new ArrAssignmentStmtAST(*$1, $3, $7);
	delete $1;
}
;

if_stmt: IF bool_rel_expr THEN statement {
	$$ = new IfStmtAST($2, $4);
}
;

for_stmt: FOR assignment TO expr DO statement {
	$$ = new ForStmtAST($2, $4, $6, 1);
}
| FOR assignment DOWNTO expr DO statement {
	$$ = new ForStmtAST($2, $4, $6, 0);
}
;

while_stmt: WHILE bool_rel_expr DO statement {
	$$ = new WhileStmtAST($2, $4);
}
;

proc_func_call: ID '(' proc_func_arg_list ')' {
	$$ = new FnCallStmtAST(*$1, *$3);
	delete $1;
}
;
proc_func_arg_list: proc_func_arg_list ',' proc_func_arg {
	$$ = $1;
	$$->push_back($3);
}
| proc_func_arg {
	$$ = new std::vector<ExprAST*>();
	$$->push_back($1);
}
| {
	$$ = new std::vector<ExprAST*>();
}
;
proc_func_arg: expr { $$ = $1; }
;


%%

int main()
{
	//yydebug = 1;
	yyparse();
	if(rootNode->typeCheck() == T_ERROR)
		std::cout << "Semantic check failed" << std::endl;
	else
	{
		std::cout << ";Semantic check passed" << std::endl;
		ostr << "global main\n";
		ostr << "extern printf\n\n";
		rootNode->codegen();
	}
}
